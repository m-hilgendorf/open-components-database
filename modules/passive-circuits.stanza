#use-added-syntax(jitx)
defpackage ocdb/passive-circuits:
  import core
  import collections
  import math
  import jitx with :
    prefix(Resistor) => EModel-
  import jitx/commands
  import ocdb/defaults
  import ocdb/generic-components
  import ocdb/generator-utils
  import ocdb/checks
  import ocdb/design-vars
  import ocdb/db-parts
  import ocdb/solvers/voltage-divider


;======================================================
;================= Voltage Divider ====================
;======================================================
public defn make-voltage-divider (
  in: JITXObject, ; input voltage pin
  out:JITXObject, ; output voltage pin
  lo: JITXObject, ; low voltage pin
  v-out:[Double, Double, Double]) :
  ; Target current through divider is 10x input current (if known), otherwise set current to be 1ma
  val current =
    if has-property?(out.i-input) : property(out.i-input) * 10.0
    else : 1.0e-3
  make-voltage-divider(in, out, lo, v-out, current)

public defn make-voltage-divider (
  in:JITXObject, 
  out:JITXObject, lo:JITXObject,
  v-out:[Double,Double,Double],
  current:Double) :
  println("Solving voltage divider [in=%_, out=%_, low=%_, v-out=(min=%_V, nom=%_V, max=%_V), current=%_A]"
          % [ref(in), ref(out), ref(lo), v-out[0], v-out[1], v-out[2], current])
  ;Extract voltages from input pin
  val v-in = property(in.voltage)

  val solution = voltage-divider(v-in, v-out, current)
  match(solution: VoltageDividerSolution) :
    make-voltage-divider-module(in, out, lo, v-out, to-esir(r1(solution)), to-esir(r2(solution)), vo(solution))
  else :
    fatal("No solution for voltage divider.")

; Generator function for voltage-divider module. This gets called at the top level
; Parameters
; ------------
; in : input pin, with annotated voltage [min nom max] (V)
; out : output pin. Gets annotated with [min nom max] (V)
; lo : low side pin (usually gnd)
; v-out : Allowable output voltage range [min nom max] (V)
; current : desired dc current of voltage divider (A) assumes output is connected to high-impedance.
; tol : desired tolerance of resistor (in %)
; returns true if fitting resistors were found else false
public defn make-voltage-divider (in:JITXObject, out:JITXObject, lo:JITXObject,
                                  v-out:[Double,Double,Double],
                                  current:Double,
                                  tol:Double) :
  val current-tol = 10.
  make-voltage-divider(in, out, lo, v-out, current, tol, current-tol)

; current-tol : Tolerance on the output current (in %)
public defn make-voltage-divider (in:JITXObject, out:JITXObject, lo:JITXObject,
                                  v-out:[Double,Double,Double],
                                  current:Double,
                                  tol:Double,
                                  current-tol: Double):
  println("Solving voltage divider [in=%_, out=%_, low=%_, v-out=(min=%_V, nom=%_V, max=%_V), current=%_A, resistor-tol=%_%%]"
          % [ref(in), ref(out), ref(lo), v-out[0], v-out[1], v-out[2], current, tol])
  val tolerance = tol / 100.
  val current-tolerance = current-tol / 100.
  val v-in = property(in.voltage)

  val solution = voltage-divider(v-in, v-out, current, tolerance, current-tolerance)
  match(solution: VoltageDividerSolution) :
    make-voltage-divider-module(in, out, lo, v-out, to-esir(r1(solution)), to-esir(r2(solution)), vo(solution))
    solution
  else :
    fatal("No solution for voltage divider.")

defn make-voltage-divider-module (in: JITXObject, out: JITXObject, lo: JITXObject,
                                  v-out: [Double, Double, Double],
                                  r-hi-cmp: InstantiableType, r-lo-cmp: InstantiableType,
                                  vo: [Double, Double, Double]) -> JITXObject:
  pcb-module voltage-divider-module (r1:InstantiableType, r2:InstantiableType):
    pin vin 
    pin vout 
    pin vlo
    inst R1: r1
    inst R2: r2
    net VDIV-IN  (R1.p[1] vin)
    net VDIV-OUT (R1.p[2] R2.p[1] vout)
    net VDIV-LO  (R2.p[2] vlo)
    group-modules([[R1 R2]])
  
  inside pcb-module:
    property(out.voltage) = vo
    inst divider: voltage-divider-module(r-hi-cmp, r-lo-cmp)
    net (in  divider.vin)
    net (out divider.vout)
    net (lo  divider.vlo)

    ; [TODO] check. voltage-levels and other check.stanza functions already adapted for JITXObjects.
    ; Check true output against requirement
    check voltage-levels(out, v-out)
    divider
